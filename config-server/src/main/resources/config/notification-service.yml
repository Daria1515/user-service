spring:
  application:
    name: notification-service
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: notification-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.use.type.headers: false
        spring.json.value.default.type: com.example.notification_service.kafka.UserEvent
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_USERNAME:example@gmail.com}
    password: ${EMAIL_PASSWORD:example}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000

server:
  port: 8082

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${server.port}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers
  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker:
    instances:
      email-provider:
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        permitted-number-of-calls-in-half-open-state: 5
      unreliable-email:
        sliding-window-size: 5
        failure-rate-threshold: 60
        wait-duration-in-open-state: 5s

logging:
  level:
    com.example.notification_service: DEBUG
    org.springframework.cloud: DEBUG
    io.github.resilience4j: DEBUG
    org.springframework.mail: DEBUG 